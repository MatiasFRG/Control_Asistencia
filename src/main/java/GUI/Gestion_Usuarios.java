/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package GUI;

import Data.UsuarioDAO;
import static GUI.Escritorio.PanelPrincipaljsjs;
import Modelo.Usuario;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
/**
 *
 * @author matia
 */
public class Gestion_Usuarios extends javax.swing.JInternalFrame {

    private UsuarioDAO usuarioDAO = new UsuarioDAO();

    public Gestion_Usuarios() {
        initComponents();
        cargarUsuariosEnTabla();
    }
    
        private void cargarUsuariosEnTabla() {
        DefaultTableModel modelo = (DefaultTableModel) TablaUsuariosTABLE.getModel();
        modelo.setRowCount(0); // Limpiar tabla

        List<Usuario> lista = usuarioDAO.listarUsuarios();
        for (Usuario u : lista) {
            modelo.addRow(new Object[]{
                u.getRut(),
                u.getNombre() + " " + u.getApellido(),
                u.getCorreo(),
                u.getRol()
            });
        }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaUsuariosTABLE = new javax.swing.JTable();
        CrearUsuarioBT = new javax.swing.JButton();
        ModificarUsuarioBT = new javax.swing.JButton();
        EliminarUsuarioBT = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);

        jLabel1.setText("Gestión de Usuarios");

        TablaUsuariosTABLE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Correo", "Rol"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablaUsuariosTABLE);
        if (TablaUsuariosTABLE.getColumnModel().getColumnCount() > 0) {
            TablaUsuariosTABLE.getColumnModel().getColumn(0).setResizable(false);
            TablaUsuariosTABLE.getColumnModel().getColumn(1).setResizable(false);
            TablaUsuariosTABLE.getColumnModel().getColumn(2).setResizable(false);
            TablaUsuariosTABLE.getColumnModel().getColumn(3).setResizable(false);
        }

        CrearUsuarioBT.setText("Crear Usuario");
        CrearUsuarioBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearUsuarioBTActionPerformed(evt);
            }
        });

        ModificarUsuarioBT.setText("Modificar Usuario");
        ModificarUsuarioBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarUsuarioBTActionPerformed(evt);
            }
        });

        EliminarUsuarioBT.setText("Eliminar Usuario");
        EliminarUsuarioBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarUsuarioBTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(142, 142, 142))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(CrearUsuarioBT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ModificarUsuarioBT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(EliminarUsuarioBT)))
                        .addGap(0, 8, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CrearUsuarioBT)
                    .addComponent(ModificarUsuarioBT)
                    .addComponent(EliminarUsuarioBT))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CrearUsuarioBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearUsuarioBTActionPerformed
 
          try {
        int rut = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese RUT:"));
        
        // Validar RUT duplicado
        List<Usuario> lista = usuarioDAO.listarUsuarios();
        for (Usuario u : lista) {
            if (u.getRut() == rut) {
                JOptionPane.showMessageDialog(this, " Ya existe un usuario con ese RUT.");
                return;
            }
        }

        String nombre = JOptionPane.showInputDialog(this, "Ingrese Nombre:");
        String apellido = JOptionPane.showInputDialog(this, "Ingrese Apellido:");
        String correo = JOptionPane.showInputDialog(this, "Ingrese Correo:");
        String password = JOptionPane.showInputDialog(this, "Ingrese Password:");

        // Validaciones de campos vacíos
        if (nombre == null || nombre.trim().isEmpty() ||
            apellido == null || apellido.trim().isEmpty() ||
            correo == null || correo.trim().isEmpty() ||
            password == null || password.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "⚠ Todos los campos son obligatorios.");
            return;
        }

        // Validar correo
        if (!correo.contains("@") || !correo.contains(".")) {
            JOptionPane.showMessageDialog(this, "⚠ Correo inválido.");
            return;
        }

        // Validar password mínimo
        if (password.length() < 4) {
            JOptionPane.showMessageDialog(this, "⚠ La contraseña debe tener al menos 4 caracteres.");
            return;
        }

        // ComboBox de roles
        String[] roles = {"Admin", "Empleado"};
        JComboBox<String> comboRoles = new JComboBox<>(roles);
        int opcion = JOptionPane.showConfirmDialog(this, comboRoles, "Seleccione Rol", JOptionPane.OK_CANCEL_OPTION);

        if (opcion == JOptionPane.OK_OPTION) {
            String rol = (String) comboRoles.getSelectedItem();

            Usuario nuevo = new Usuario(rut, nombre, apellido, correo, password, rol);

            if (usuarioDAO.crearUsuario(nuevo)) {
                JOptionPane.showMessageDialog(this, "✅ Usuario creado.");
                cargarUsuariosEnTabla();
            } else {
                JOptionPane.showMessageDialog(this, "❌ Error al crear usuario.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "⚠ Creación cancelada.");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "⚠ El RUT debe ser numérico.");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "⚠ Error: " + e.getMessage());
    }

        
        
    }//GEN-LAST:event_CrearUsuarioBTActionPerformed

    private void ModificarUsuarioBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarUsuarioBTActionPerformed
       
          int fila = TablaUsuariosTABLE.getSelectedRow();
    if (fila >= 0) {
        int rut = (int) TablaUsuariosTABLE.getValueAt(fila, 0);

        String nombre = JOptionPane.showInputDialog(this, "Nuevo Nombre:", TablaUsuariosTABLE.getValueAt(fila, 1));
        String apellido = JOptionPane.showInputDialog(this, "Nuevo Apellido:");
        String correo = JOptionPane.showInputDialog(this, "Nuevo Correo:", TablaUsuariosTABLE.getValueAt(fila, 2));
        String password = JOptionPane.showInputDialog(this, "Nuevo Password:");

        // Validaciones
        if (nombre == null || nombre.trim().isEmpty() ||
            apellido == null || apellido.trim().isEmpty() ||
            correo == null || correo.trim().isEmpty() ||
            password == null || password.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, " Todos los campos son obligatorios.");
            return;
        }

        if (!correo.contains("@") || !correo.contains(".")) {
            JOptionPane.showMessageDialog(this, " Correo inválido.");
            return;
        }

        if (password.length() < 4) {
            JOptionPane.showMessageDialog(this, " La contraseña debe tener al menos 4 caracteres.");
            return;
        }

        // Rol con ComboBox en vez de texto
        String[] roles = {"Admin", "Empleado"};
        JComboBox<String> comboRoles = new JComboBox<>(roles);
        comboRoles.setSelectedItem(TablaUsuariosTABLE.getValueAt(fila, 3)); // rol actual
        int opcion = JOptionPane.showConfirmDialog(this, comboRoles, "Seleccione Rol", JOptionPane.OK_CANCEL_OPTION);

        if (opcion == JOptionPane.OK_OPTION) {
            String rol = (String) comboRoles.getSelectedItem();

            Usuario modificado = new Usuario(rut, nombre, apellido, correo, password, rol);

            if (usuarioDAO.modificarUsuario(modificado)) {
                JOptionPane.showMessageDialog(this, " Usuario modificado.");
                cargarUsuariosEnTabla();
            } else {
                JOptionPane.showMessageDialog(this, " Error al modificar usuario.");
            }
        } else {
            JOptionPane.showMessageDialog(this, " Modificación cancelada.");
        }
    } else {
        JOptionPane.showMessageDialog(this, " Seleccione un usuario primero.");
    }  

    }//GEN-LAST:event_ModificarUsuarioBTActionPerformed

    private void EliminarUsuarioBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarUsuarioBTActionPerformed
       
            int fila = TablaUsuariosTABLE.getSelectedRow();
    if (fila >= 0) {
        int rut = (int) TablaUsuariosTABLE.getValueAt(fila, 0);

        int confirm = JOptionPane.showConfirmDialog(this, 
                "¿Eliminar al usuario con RUT " + rut + "?", 
                "Confirmar eliminación", 
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            if (usuarioDAO.eliminarUsuario(rut)) {
                JOptionPane.showMessageDialog(this, " Usuario eliminado.");
                cargarUsuariosEnTabla();
            } else {
                JOptionPane.showMessageDialog(this, " Error al eliminar usuario.");
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, " Seleccione un usuario primero.");
    }
        
    }//GEN-LAST:event_EliminarUsuarioBTActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CrearUsuarioBT;
    private javax.swing.JButton EliminarUsuarioBT;
    private javax.swing.JButton ModificarUsuarioBT;
    private javax.swing.JTable TablaUsuariosTABLE;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
